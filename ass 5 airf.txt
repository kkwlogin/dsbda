DSBD ASS 5 Airquality 

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

df = pd.read_csv('airquality.csv')

df.head()

numeric_cols = ['PM2.5', 'PM10', 'NO', 'NO2', 'NOx', 'NH3',
                'CO', 'SO2', 'O3', 'Benzene', 'Toluene', 'Xylene', 'AQI']
				
for col in numeric_cols:
    df[col] = df[col].fillna(df[col].mean())

df['AQI_Bucket'] = df['AQI_Bucket'].fillna(df['AQI_Bucket'].mode()[0])

df.isnull().sum()

df = df.drop_duplicates()

df.head()

column_new = df['StationId']
subset_2 = pd.DataFrame(column_new, columns = ['StationId'])

merged_subset = pd.concat([df[numeric_cols], subset_2], axis = 1)

merged_subset.head()

def remove_outliers(col):
    q1 = col.quantile(0.25)
    q3 = col.quantile(0.75)
    iqr = q3 - q1
    lower = q1 - 1.5 * iqr
    upper = q3 + 1.5 * iqr
    return col.clip(lower, upper)

#BEfore remove outlieer
sns.boxplot(data=df['PM2.5'])
plt.title('PM2.5 - Before Outlier Removal')
plt.show()

for col in numeric_cols:
    df[col] = remove_outliers(df[col])

# After outlier removal
sns.boxplot(data=df['PM2.5'])
plt.title('PM2.5 - After Outlier Removal')
plt.show()

le = LabelEncoder()
df['AQI_Bucket'] = le.fit_transform(df['AQI_Bucket'])

print("\nAQI_Bucket label encoding:")
for label, code in zip(le.classes_, le.transform(le.classes_)):
    print(f"{label} => {code}")

# Scaling numeric features
scaler = StandardScaler()
df[numeric_cols] = scaler.fit_transform(df[numeric_cols])

print("\nScaled numeric features sample:")
print(df[numeric_cols].head())

df.head()

df_1 = df.iloc[:, 2:]

X = df[['PM2.5', 'PM10', 'AQI_Bucket']]
y = df['AQI']

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42)

print("\nTrain and test shapes:")
print("X_train:", X_train.shape)
print("X_test:", X_test.shape)
print("y_train:", y_train.shape)
print("y_test:", y_test.shape)

# Model training
model = LinearRegression()
model.fit(X_train, y_train)

# Prediction
y_pred = model.predict(X_test)

# Evaluation
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("\nModel Evaluation:")
print("Mean Squared Error:", mse)
print("R2 Score:", r2)

plt.figure(figsize=(10, 8))
sns.heatmap(df[numeric_cols].corr(), annot=True, cmap='coolwarm')
plt.title("Correlation Heatmap")
plt.show()	